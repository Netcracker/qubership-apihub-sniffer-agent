---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: 'qubership-apihub-sniffer-agent'
  labels:
    name: 'qubership-apihub-sniffer-agent'
    app.kubernetes.io/name: 'qubership-apihub-sniffer-agent'
    app.kubernetes.io/component: 'backend'
    app.kubernetes.io/part-of: 'qubership-apihub-sniffer-agent'
    app.kubernetes.io/managed-by: 'helm'
spec:
  template:
    metadata:
      labels:
        name: 'qubership-apihub-sniffer-agent'
        app.kubernetes.io/name: 'qubership-apihub-sniffer-agent'
        app.kubernetes.io/component: 'backend'
        app.kubernetes.io/part-of: 'qubership-apihub-sniffer-agent'
        app.kubernetes.io/managed-by: 'helm'
    spec:
      serviceAccountName: 'qubership-apihub-sniffer-agent'
      containers:
      - name: 'qubership-apihub-sniffer-agent'
        image: '{{ .Values.qubershipApihubSnifferAgent.image.repository }}:{{ .Values.qubershipApihubSnifferAgent.image.tag }}'
        ports:
        - name: web
          containerPort: 8080
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: '{{ .Values.qubershipApihubSnifferAgent.logLevel }}'
        - name: LISTEN_ADDRESS
          value: ':8080'
        - name: PRODUCTION_MODE
          value: 'false'
        - name: CAPTURE_DIRECTORY
          value: '/tmp'
        - name: SNIFFER_API_KEY
          valueFrom:
            secretKeyRef:
              name: 'qubership-apihub-sniffer-agent-keys-secret'
              key: api_key
        - name: SNIFFER_INTERNAL_KEY
          valueFrom:
            secretKeyRef:
              name: 'qubership-apihub-sniffer-agent-keys-secret'
              key: internal_key
        - name: STORAGE_SERVER_USERNAME
          valueFrom:
            secretKeyRef:
              name: 'qubership-apihub-sniffer-agent-s3-secret'
              key: storage_server_username
        - name: STORAGE_SERVER_BUCKET_NAME
          valueFrom:
            secretKeyRef:
              name: 'qubership-apihub-sniffer-agent-s3-secret'
              key: storage_server_bucketname
        - name: STORAGE_SERVER_CRT
          valueFrom:
            secretKeyRef:
              name: 'qubership-apihub-sniffer-agent-s3-secret'
              key: storage_server_crt
        - name: STORAGE_SERVER_URL
          valueFrom:
            secretKeyRef:
              name: 'qubership-apihub-sniffer-agent-s3-secret'
              key: storage_server_url
        - name: STORAGE_SERVER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: 'qubership-apihub-sniffer-agent-s3-secret'
              key: storage_server_password
        - name: MINIO_STORAGE_ACTIVE
          value: '{{ .Values.qubershipApihubSnifferAgent.env.s3Storage.active }}'
        - name: PAAS_PLATFORM
          value: 'KUBERNETES'
        - name: KUBECONFIG
          value: 'on'
        - name: KUBE_NODE_PREFIX
          value: 'qubership-apihub-sniffer-agent-'
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLOUD_NAME
          value: '{{ .Values.qubershipApihubSnifferAgent.env.cloudName }}'
        resources:
          requests:
            cpu: {{ .Values.qubershipApihubSnifferAgent.resource.cpu.request }}
            memory: '{{ .Values.qubershipApihubSnifferAgent.resource.memory.request }}'
          limits:
            cpu: {{ .Values.qubershipApihubSnifferAgent.resource.cpu.limit }}
            memory: '{{ .Values.qubershipApihubSnifferAgent.resource.memory.limit }}'
        livenessProbe:
          httpGet:
            path: /live
            port: web
          initialDelaySeconds: 50
          timeoutSeconds: 2
        readinessProbe:
          httpGet:
            path: /ready
            port: web
          initialDelaySeconds: 50
          timeoutSeconds: 2
        startupProbe: 
          httpGet:
            path: /startup
            port: web
          initialDelaySeconds: 50
          timeoutSeconds: 2
          periodSeconds: 5
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          readOnlyRootFilesystem: false
          runAsNonRoot: false # if false then enable CAP_SYS_ADMIN
          seccompProfile:
            type: Unconfined
          allowPrivilegeEscalation: true # if true then enable CAP_SYS_ADMIN
          capabilities:
            add:
              - NET_ADMIN
              - NET_RAW
              - SYS_ADMIN # this option required for above
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      hostPID: true
  selector:
    matchLabels:
      name: 'qubership-apihub-sniffer-agent'
